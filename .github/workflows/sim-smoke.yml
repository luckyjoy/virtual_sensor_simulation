name: Run simulation for 20 sensors over HTTP for 30s

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-sim:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt aiohttp pyyaml aiomqtt

      - name: Start HTTP collector (background) and Wait for Readiness
        run: |
          # 1. Start the aiohttp server in background (detached)
          nohup python - <<'PY' > server.log 2>&1 &
import asyncio
from aiohttp import web

async def ingest(request):
    data = await request.json()
    return web.json_response({"ok": True})

app = web.Application()
app.add_routes([web.post('/ingest', ingest)])
web.run_app(app, port=8080)
PY

          # 2. Create a small port-check script
          cat > wait_for_port.py <<'EOF'
import socket, time
for i in range(30):  # 30 seconds max wait
    try:
        s = socket.create_connection(('localhost', 8080), timeout=1)
        s.close()
        print("HTTP server ready")
        exit(0)
    except OSError:
        time.sleep(1)
print("Server not responding after 30s")
exit(1)
EOF

          # 3. Wait until server is ready
          python wait_for_port.py

      - name: Run 20 sensors over HTTP for 30s
        run: |
          mkdir -p logs
          python run_sim.py --count 20 --transport http \
            --http-url http://localhost:8080/ingest \
            --rate 2 --duration 30 --log-csv logs/out.csv

      - name: Upload CSV log artifact
        uses: actions/upload-artifact@v4
        with:
          name: sim-logs
          path: logs/out.csv
