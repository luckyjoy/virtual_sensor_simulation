name: Run simulation for 20 sensors over HTTP for 30s

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-sim:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Performance improvement: Install uvloop for faster event loop
          pip install -r requirements.txt aiohttp uvloop

      # ------------------------------------------------------------------
      # Server Fix: Start the HTTP collector using the dedicated server.py file
      # This ensures proper aiohttp startup and backgrounding.
      - name: Start HTTP collector in background
        id: start_server
        run: |
          # 1. Create a temporary server file with uvloop support
          cat <<'PY_SERVER' > /tmp/server_runner.py
          import asyncio
          from aiohttp import web
          
          try:
              import uvloop
              uvloop.install()
          except ImportError:
              pass

          async def ingest(request):
              # This function must return a response quickly.
              try:
                  # Read data, but don't do anything that blocks the event loop
                  data = await request.json()
              except Exception:
                  pass
              return web.json_response({"ok": True})

          app = web.Application()
          app.add_routes([web.post('/ingest', ingest)])
          
          if __name__ == "__main__":
              web.run_app(app, port=8080)
          
          PY_SERVER
          
          # 2. Run the server and save the PID
          nohup python /tmp/server_runner.py > server.log 2>&1 &
          echo $! > server.pid
          echo "Server PID: $(cat server.pid)"
      # ------------------------------------------------------------------

      # ------------------------------------------------------------------
      # Robustness Fix: Use curl for application-level health check and print logs on failure.
      - name: Wait for HTTP server readiness & Check Logs
        run: |
          echo "Waiting for HTTP server on port 8080..."
          
          for i in {1..10}; do
              # Use a simple GET request to check if the aiohttp server is responding at all (will return 404/405/200)
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
              
              # Check for standard server response codes (2xx, 3xx, 4xx) which indicate the app is alive
              if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 500 ]; then
                  echo "HTTP server is ready! Status: $HTTP_CODE"
                  break
              fi
              echo "Server not ready (Status: $HTTP_CODE). Waiting $i/10..."
              sleep 3
          done
          
          # Final check and log dump if still failing
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          if ! ([ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 500 ]); then
              echo "❌ Server failed to start or respond after 30 seconds. Status: $HTTP_CODE"
              echo "--- Server Log (server.log) ---"
              cat server.log
              echo "---------------------------"
              exit 1
          fi
      # ------------------------------------------------------------------

      - name: Run 20 sensors over HTTP for 30s
        run: |
          mkdir -p logs
          # Simulation is expected to log data now that the server is robustly checked
          python run_sim.py --count 20 --transport http \
            --http-url http://localhost:8080/ingest \
            --rate 2 --duration 30 --log-csv logs/out.csv

      - name: Check CSV output directory
        if: always()
        run: |
          echo "Checking logs directory contents..."
          ls -lh logs
          
      - name: Verify CSV has at least 20 data lines
        run: |
          CSV_FILE="logs/out.csv"
          TOTAL_LINES=$(wc -l < "$CSV_FILE" | tr -d ' ')
          DATA_LINES=$((TOTAL_LINES - 1))
          
          echo "Total lines in CSV (including header): $TOTAL_LINES"
          echo "Data lines (excluding header): $DATA_LINES"
          
          MIN_REQUIRED_LINES=20
          
          if [ "$DATA_LINES" -ge "$MIN_REQUIRED_LINES" ]; then
              echo "✅ Success: CSV contains $DATA_LINES data lines, which is >= $MIN_REQUIRED_LINES."
          else
              echo "❌ Failure: CSV contains only $DATA_LINES data lines. Expected at least $MIN_REQUIRED_LINES."
              head -n 10 "$CSV_FILE"
              exit 1
          fi

      - name: Ensure logs are flushed before upload
        if: always()
        run: |
          echo "Waiting a moment to ensure logs are fully written..."
          sync
          sleep 3
          ls -lh logs || true
          echo "Log file size:"
          wc -c logs/out.csv || true

      - name: Upload CSV log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sim-logs
          path: logs/out.csv

      - name: Cleanup HTTP server
        if: always()
        run: |
          if [ -f server.pid ]; then
              echo "Stopping HTTP server..."
              kill -9 $(cat server.pid) || true
              rm server.pid
          fi
          echo "Cleanup done."