jobs:
  run-sim:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install aiohttp uvloop aiomqtt

      - name: Start server and wait for readiness
        id: start_server
        run: |
          nohup python server.py > server.log 2>&1 &
          echo $! > server.pid
          echo "Server PID: $(cat server.pid)"
          echo "Waiting for HTTP server on port 8080..."

          for i in {1..15}; do
            HTTP_CODE=$(curl -sS -o /dev/null -w "%{http_code}" \
              -X POST -H "Content-Type: application/json" \
              -d '{"test":1}' http://127.0.0.1:8080/ingest || echo "000")
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "✅ HTTP server is ready! Status: $HTTP_CODE"
              READY=1
              break
            fi
            echo "Server not ready (status: $HTTP_CODE). Attempt $i/15..."
            sleep 3
          done

          if [ "${READY:-0}" -ne 1 ]; then
            echo "❌ Server failed to start or respond in time."
            echo "--- Server Log (server.log) ---"
            sed -n '1,200p' server.log || true
            exit 1
          fi

      - name: Run 20 sensors over HTTP for 30s
        run: |
          mkdir -p logs
          python run_sim.py --count 20 --transport http \
            --http-url http://localhost:8080/ingest \
            --rate 2 --duration 30 --log-csv logs/out.csv

      - name: Check logs directory contents
        if: always()
        run: |
          echo "Checking logs directory contents..."
          ls -lh logs || echo "(logs/ does not exist yet)"

      - name: Verify CSV has at least 20 data lines
        run: |
          CSV_FILE="logs/out.csv"
          TOTAL_LINES=$(wc -l < "$CSV_FILE" | tr -d ' ')
          DATA_LINES=$((TOTAL_LINES - 1))
          echo "Total lines (with header): $TOTAL_LINES"
          echo "Data lines (excluding header): $DATA_LINES"
          MIN_REQUIRED_LINES=20
          if [ "$DATA_LINES" -ge "$MIN_REQUIRED_LINES" ]; then
            echo "✅ CSV contains $DATA_LINES data lines (>= $MIN_REQUIRED_LINES)."
          else
            echo "❌ CSV contains only $DATA_LINES data lines."
            head -n 10 "$CSV_FILE"
            exit 1
          fi

      - name: Ensure logs are flushed before upload
        if: always()
        run: |
          echo "Waiting a moment to ensure logs are fully written..."
          sync
          sleep 3
          ls -lh logs || true
          echo "Log file size:"
          wc -c logs/out.csv || true

      - name: Upload CSV log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sim-logs
          path: logs/out.csv

      - name: Cleanup HTTP server
        if: always()
        run: |
          if [ -f server.pid ]; then
            echo "Stopping HTTP server..."
            kill -9 "$(cat server.pid)" 2>/dev/null || true
            rm -f server.pid
          fi
          echo "Cleanup done."
