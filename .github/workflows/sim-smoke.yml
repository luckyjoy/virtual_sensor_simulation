name: Run simulation for 20 sensors over HTTP for 30s

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-sim:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt aiohttp pyyaml aiomqtt

      - name: Start HTTP collector (background) and wait for readiness
        run: |
          # Write a tiny aiohttp server to server.py
          cat > server.py <<'EOF'
import asyncio
from aiohttp import web

async def ingest(request):
    try:
        data = await request.json()
    except Exception:
        data = None
    return web.json_response({"ok": True})

app = web.Application()
app.add_routes([web.post('/ingest', ingest)])

if __name__ == "__main__":
    web.run_app(app, port=8080)
EOF

          # Start the server in the background
          nohup python server.py > server.log 2>&1 &

          # Wait until port 8080 is open (max 30 s)
          echo "Waiting for HTTP server to start..."
          for i in {1..30}; do
            if nc -z localhost 8080; then
              echo "✅ HTTP server is ready."
              break
            fi
            sleep 1
          done

          if ! nc -z localhost 8080; then
            echo "❌ HTTP server failed to start in time. Log output:"
            cat server.log
            exit 1
          fi

      - name: Run 20 sensors over HTTP for 30s
        run: |
          mkdir -p logs
          python run_sim.py --count 20 --transport http \
            --http-url http://localhost:8080/ingest \
            --rate 2 --duration 30 --log-csv logs/out.csv

      - name: Upload CSV log artifact
        uses: actions/upload-artifact@v4
        with:
          name: sim-logs
          path: logs/out.csv
