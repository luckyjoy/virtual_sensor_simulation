name: Run simulation for 20 sensors over HTTP for 30s

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-sim:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt aiohttp

      - name: Start HTTP collector in background
        id: start_server
        run: |
          nohup python - <<'PY' > server.log 2>&1 &
          import asyncio
          from aiohttp import web

          async def ingest(request):
              data = await request.json()
              return web.json_response({"ok": True})

          app = web.Application()
          app.add_routes([web.post('/ingest', ingest)])
          web.run_app(app, port=8080)
          PY
          echo $! > server.pid
          echo "Server PID: $(cat server.pid)"

      - name: Wait for HTTP server readiness
        run: |
          echo "Waiting for HTTP server on port 8080..."
          for i in {1..30}; do
              if nc -z localhost 8080; then
                  echo "HTTP server is ready!"
                  break
              fi
              sleep 1
          done
          nc -z localhost 8080 || { echo "Server failed to start"; cat server.log; exit 1; }

      - name: Run 20 sensors over HTTP for 30s
        run: |
          mkdir -p logs
          python run_sim.py --count 20 --transport http \
            --http-url http://localhost:8080/ingest \
            --rate 2 --duration 30 --log-csv logs/out.csv

      - name: Ensure logs are flushed before upload
        if: always()
        run: |
          echo "Waiting a moment to ensure logs are fully written..."
          sync
          sleep 3
          ls -lh logs || true
          echo "Log file size:"
          wc -c logs/out.csv || true

      - name: Upload CSV log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sim-logs
          path: logs/out.csv

      - name: Cleanup HTTP server
        if: always()
        run: |
          if [ -f server.pid ]; then
              echo "Stopping HTTP server..."
              kill -9 $(cat server.pid) || true
              rm server.pid
          fi
          echo "Cleanup done."
